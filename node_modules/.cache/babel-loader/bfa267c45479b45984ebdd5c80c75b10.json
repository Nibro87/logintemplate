{"ast":null,"code":"const URL = \"ADD URL TO YOU SERVER\";\n\nfunction handleHttpErrors(res) {\n  if (!res.ok) {\n    return Promise.reject({\n      status: res.status,\n      fullError: res.json()\n    });\n  }\n\n  return res.json();\n}\n\nfunction apiFacade() {\n  /* Insert utility-methods from a latter step (d) here (REMEMBER to uncomment in the returned object when you do)*/\n  const setToken = token => {\n    localStorage.setItem('jwtToken', token);\n  };\n\n  const getToken = () => {\n    return localStorage.getItem('jwtToken');\n  };\n\n  const loggedIn = () => {\n    const loggedIn = getToken() != null;\n    return loggedIn;\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"jwtToken\");\n  };\n\n  const login = (user, password) => {\n    facade.login(user, pass).then(res => setLoggedIn(true));\n  };\n\n  const fetchData = () => {\n    /*TODO */\n  };\n\n  const makeOptions = (method, addToken, body) => {\n    var opts = {\n      method: method,\n      headers: {\n        \"Content-type\": \"application/json\",\n        'Accept': 'application/json'\n      }\n    };\n\n    if (addToken && loggedIn()) {\n      opts.headers[\"x-access-token\"] = getToken();\n    }\n\n    if (body) {\n      opts.body = JSON.stringify(body);\n    }\n\n    return opts;\n  };\n\n  return {\n    makeOptions,\n    setToken,\n    getToken,\n    loggedIn,\n    login,\n    logout,\n    fetchData\n  };\n}\n\nconst facade = apiFacade();\nexport default facade;","map":{"version":3,"sources":["C:/Users/nicho/OneDrive/Dokumenter/GitHub/logintemplate/src/apiFacade.js"],"names":["URL","handleHttpErrors","res","ok","Promise","reject","status","fullError","json","apiFacade","setToken","token","localStorage","setItem","getToken","getItem","loggedIn","logout","removeItem","login","user","password","facade","pass","then","setLoggedIn","fetchData","makeOptions","method","addToken","body","opts","headers","JSON","stringify"],"mappings":"AAAA,MAAMA,GAAG,GAAG,uBAAZ;;AAEA,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAC9B,MAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACX,WAAOC,OAAO,CAACC,MAAR,CAAe;AAAEC,MAAAA,MAAM,EAAEJ,GAAG,CAACI,MAAd;AAAsBC,MAAAA,SAAS,EAAEL,GAAG,CAACM,IAAJ;AAAjC,KAAf,CAAP;AACD;;AACD,SAAON,GAAG,CAACM,IAAJ,EAAP;AACA;;AAED,SAASC,SAAT,GAAqB;AACpB;AAEA,QAAMC,QAAQ,GAAIC,KAAD,IAAW;AACzBC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC;AACD,GAFF;;AAGD,QAAMG,QAAQ,GAAG,MAAM;AACrB,WAAOF,YAAY,CAACG,OAAb,CAAqB,UAArB,CAAP;AACD,GAFD;;AAGA,QAAMC,QAAQ,GAAG,MAAM;AACrB,UAAMA,QAAQ,GAAGF,QAAQ,MAAM,IAA/B;AACA,WAAOE,QAAP;AACD,GAHD;;AAIA,QAAMC,MAAM,GAAG,MAAM;AACnBL,IAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACD,GAFD;;AAWA,QAAMC,KAAK,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAACC,IAAAA,MAAM,CAACH,KAAP,CAAaC,IAAb,EAAkBG,IAAlB,EAC9BC,IAD8B,CACzBtB,GAAG,IAAGuB,WAAW,CAAC,IAAD,CADQ;AAE7B,GAFN;;AAGA,QAAMC,SAAS,GAAG,MAAM;AAAC;AAAY,GAArC;;AAIA,QAAMC,WAAW,GAAE,CAACC,MAAD,EAAQC,QAAR,EAAiBC,IAAjB,KAAyB;AACzC,QAAIC,IAAI,GAAG;AACTH,MAAAA,MAAM,EAAEA,MADC;AAETI,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,kBAAU;AAFH;AAFA,KAAX;;AAOA,QAAIH,QAAQ,IAAIb,QAAQ,EAAxB,EAA4B;AAC1Be,MAAAA,IAAI,CAACC,OAAL,CAAa,gBAAb,IAAiClB,QAAQ,EAAzC;AACD;;AACD,QAAIgB,IAAJ,EAAU;AACRC,MAAAA,IAAI,CAACD,IAAL,GAAYG,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAZ;AACD;;AACD,WAAOC,IAAP;AACD,GAfF;;AAgBC,SAAO;AACHJ,IAAAA,WADG;AAEHjB,IAAAA,QAFG;AAGHI,IAAAA,QAHG;AAIHE,IAAAA,QAJG;AAKHG,IAAAA,KALG;AAMHF,IAAAA,MANG;AAOHS,IAAAA;AAPG,GAAP;AAcA;;AACD,MAAMJ,MAAM,GAAGb,SAAS,EAAxB;AACA,eAAea,MAAf","sourcesContent":["const URL = \"ADD URL TO YOU SERVER\";\r\n \r\nfunction handleHttpErrors(res) {\r\n if (!res.ok) {\r\n   return Promise.reject({ status: res.status, fullError: res.json() })\r\n }\r\n return res.json();\r\n}\r\n \r\nfunction apiFacade() {\r\n /* Insert utility-methods from a latter step (d) here (REMEMBER to uncomment in the returned object when you do)*/\r\n \r\n const setToken = (token) => {\r\n    localStorage.setItem('jwtToken', token)\r\n  }\r\nconst getToken = () => {\r\n  return localStorage.getItem('jwtToken')\r\n}\r\nconst loggedIn = () => {\r\n  const loggedIn = getToken() != null;\r\n  return loggedIn;\r\n}\r\nconst logout = () => {\r\n  localStorage.removeItem(\"jwtToken\");\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst login = (user, password) => {facade.login(user,pass)\r\n    .then(res =>setLoggedIn(true));\r\n     }\r\nconst fetchData = () => {/*TODO */  }\r\n\r\n\r\n\r\nconst makeOptions= (method,addToken,body) =>{\r\n   var opts = {\r\n     method: method,\r\n     headers: {\r\n       \"Content-type\": \"application/json\",\r\n       'Accept': 'application/json',\r\n     }\r\n   }\r\n   if (addToken && loggedIn()) {\r\n     opts.headers[\"x-access-token\"] = getToken();\r\n   }\r\n   if (body) {\r\n     opts.body = JSON.stringify(body);\r\n   }\r\n   return opts;\r\n }\r\n return {\r\n     makeOptions,\r\n     setToken,\r\n     getToken,\r\n     loggedIn,\r\n     login,\r\n     logout,\r\n     fetchData\r\n }\r\n\r\n \r\n\r\n\r\n\r\n}\r\nconst facade = apiFacade();\r\nexport default facade;\r\n"]},"metadata":{},"sourceType":"module"}